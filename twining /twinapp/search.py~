from collections import Counter
from prettytable import PrettyTable
import twitter
import json	
import status
# XXX: Set this variable to a trending topic,
# or anything else for that matter. The example query below
# was a trending topic when this content was being developed
# and is used throughout the remainder of this chapter.
#q = '#HUTRocky'
#count = 100
# See https://dev.twitter.com/docs/api/1.1/get/search/twseets
#search_results = status.twitter_api.search.tweets(q=q, count=count)
#statuses = search_results['statuses']
# Iterate through 5 more batches of results by following the cursor

class search(object):
	def __init__(self, hashtag)
		self.Hashtag = hashtag
		self.Count = 100
		self.Search_results = status.twitter_api.search.tweets(q=self.Hashtag, count=self.Count)
		self.Statuses = self.Search_results['statuses']
	
		for _ in range(5):
			print "Length of statuses", len(self.Statuses)
			try:	
				self.Next_results = self.Search_results['search_metadata']['next_results']

			except KeyError, e: # No more results when next_results doesn't exist
				break
		self.Status_texts = [ status['text']
			for self.Status in self.Statuses ]
		self.Screen_names = [ user_mention['screen_name']
			for self.Status in self.Statuses
				for self.User_mention in self.Status['entities']['user_mentions'] ]
		self.Hashtag = [ hashtag['text']
			for self.Status in self.Statuses
				for self.Hashtag in self.Status['entities']['hashtags']]
		# Compute a collection of all words from all tweets
		self.Words = [ w for t in self.Status_texts
				for w in t.split() ]

		self.Retweets = [
			# Store out a tuple of these three values ...
			(self.Status['retweet_count'],
			self.Status['retweeted_status']['user']['screen_name'],
			self.Status['text'])
	
			# ... for each status ...
			for self.Status in self.Statuses
			# ... so long as the status meets this condition.
				if self.Status.has_key('retweeted_status')
			]
	# Slice off the first 5 from the sorted results and display each item in the tuple

		self.Pt = PrettyTable(self.Field_names=['Count', 'Screen Name', 'Text'])
		[ self.Pt.add_row(row) for row in sorted(retweets, reverse=True)[:25]]
		self.Pt.max_width['Text'] = 50
		self.Pt.align= 'l'

	# A function for computing lexical diversity
	def lexical_diversity(self, tokens):
		return 1.0*len(set(tokens))/len(tokens)
	
	# A function for computing the average number of words per tweet
	def average_words(self, statuses):
		total_words = sum([ len(s.split()) for s in statuses ])
		return 1.0*total_words/len(statuses)
	
	def status_text(self):
		return len(self.Status_texts)
		
print "tokens Count", len(self.Status_texts)
print "Words: ",lexical_diversity(self.Status_texts)
print "Screen Names: ", lexical_diversity(self.Screen_names)
print "hashtags: ", lexical_diversity(hashtags)
print "Average Text: ", average_words(self.Status_texts)

